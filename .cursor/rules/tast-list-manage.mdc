---
description: 
globs: 
alwaysApply: false
---
开发前，先整理一份markdown格式的功能列表（名称task.md），每次开发完代码后，对功能列表进行更新，每个功能如果有条件，都要生成测试用例进行测试，测试正常后，对功能列表进行更新，格式如下：
```
# 项目功能列表

## 待办

### 系统功能完善
- [ ] **数据源与更新机制**
    - [ ] 明确数据源的具体来源 (API, 文件, 数据库等)
    - [ ] 设计并实现稳定可靠的数据获取与每日自动更新流程 (股票行情、财务数据、因子数据等)
- [ ] **组合优化模块**
    - [ ] 实现并验证均值-方差优化方法，包括参数配置界面/API
    - [ ] 实现并验证风险平价优化方法，包括参数配置界面/API
    - [ ] (可选) 实现等权重组合方法
    - [ ] 明确并实现组合优化中的各类约束条件设置 (如行业中性、个股权重上限等)
- [ ] **回测引擎增强**
    - [ ] 明确回测引擎支持的策略类型和回测频率 (日级、分钟级等)
    - [ ] 定义并实现更全面的性能评估指标 (如夏普比率、索提诺比率、最大回撤、年化收益率、Alpha、Beta 等)
    - [ ] 支持参数化回测和批量回测功能
    - [ ] 提供清晰的回测结果可视化展示
- [ ] **分析报告模块**
    - [ ] 完善行业分析报告：确定分析维度、数据来源、生成逻辑和展现形式
    - [ ] 完善因子贡献度分析报告：确定分析方法 (如 IC 分析、分层回测)、指标、生成逻辑和展现形式
    - [ ] (可选) 增加归因分析模块
- [ ] **生产环境部署**
    - [ ] 制定详细的生产模式部署方案 (如使用 Gunicorn/Uvicorn + Nginx)
    - [ ] 配置生产环境的数据库、日志、监控等
- [ ] **用户认证与权限管理** (若系统需支持多用户或对外服务)
    - [ ] 设计并实现用户注册、登录、认证机制
    - [ ] 设计并实现基于角色的权限管理系统
- [ ] **定时任务与调度系统**
    - [ ] 建立稳健的定时任务调度机制 (如使用 APScheduler, Celery Beat)
    - [ ] 实现关键任务的自动化调度：数据更新、模型训练、预测生成、报告生成等
- [ ] **系统安全性强化**
    - [ ] Web 应用安全：全面排查并修复潜在漏洞 (XSS, CSRF, SQL注入等)，使用HTTPS
    - [ ] API 接口安全：强化认证授权机制 (如 OAuth2, JWT)，实施速率限制，输入验证
    - [ ] 数据安全：考虑敏感数据的加密存储和传输
- [ ] **前端用户体验提升**
    - [ ] 对现有Web界面进行用户体验评估，收集用户反馈
    - [ ] 优化界面布局、交互流程，提升易用性和美观度
    - [ ] 提升前端页面加载速度和操作响应速度
- [ ] **异步任务处理**
    - [ ] 识别系统中耗时的操作 (如模型训练、批量因子计算、大规模数据回测)
    - [ ] 引入异步任务队列 (如 Celery + Redis/RabbitMQ) 处理这些操作，避免阻塞主流程，提升系统响应性
- [ ] **配置管理优化**
    - [ ] 确保 `config.py` 或类似配置文件覆盖所有可配置项
    - [ ] 实现清晰的开发、测试、生产环境配置分离管理 (如使用环境变量、`.env` 文件或专门的配置库)
- [ ] **文档体系完善与一致性**
    - [ ] 统一并更新所有项目文档 (`README.md`, `多因子模型系统完整指南.md`, API文档等)
    - [ ] 确保文档内容 (如启动命令、端口号、API端点、功能描述) 的准确性和一致性
    - [ ] 补充缺失的架构设计文档、模块说明文档

### 代码优化与技术债清理
- [ ] **代码结构与模块化重构**
    - [ ] 审查并重构根目录下的 Python 脚本，按功能归类到 `app/services`, `scripts/` (内部分子目录如 `data_processing`, `model_ops`, `analysis_reports`), 或 `tools/` 等逻辑目录
    - [ ] 严格遵循 `app/` 内部既定的模块化结构 (api, services, models, utils)，确保职责清晰，降低耦合度
- [ ] **测试覆盖率与质量提升**
    - [ ] 引入并配置测试覆盖率工具 (如 `coverage.py`)，并集成到 CI 流程
    - [ ] 针对核心业务逻辑编写全面的单元测试 (因子计算公式、模型训练流程、API 接口、回测核心逻辑)
    - [ ] 补充集成测试，确保模块间协作正常
    - [ ] 建立测试数据管理策略
- [ ] **错误处理与日志记录规范化**
    - [ ] 全面审查并统一项目中的错误处理机制，提供明确、友好的错误信息给用户和API调用者
    - [ ] 规范日志记录：统一日志格式，确保关键操作、系统事件、错误异常均有充分记录，并区分日志级别
    - [ ] (可选) 集成集中式日志管理系统 (如 ELK Stack, Grafana Loki)
- [ ] **性能分析与优化**
    - [ ] 对计算密集型任务 (因子计算、模型训练、数据查询) 进行性能剖析 (Profiling)
    - [ ] 优化数据处理逻辑，例如使用更高效的 Pandas/NumPy 操作，或在适当时机考虑 Polars
    - [ ] 数据库查询优化：检查慢查询，添加必要索引
    - [ ] (可选) 探索并行计算或分布式计算在特定场景的应用
- [ ] **代码可扩展性与可维护性**
    - [ ] 审查现有代码设计，识别不利于扩展和维护的模式 (如硬编码、高耦合模块)
    - [ ] 重构相关代码，采用更灵活的设计模式，方便未来添加新因子、新模型、新策略
    - [ ] 确保API接口设计具有良好的向前和向后兼容性
- [ ] **依赖管理现代化**
    - [ ] 确保 `requirements.txt` 中的依赖版本被固定 (使用 `pip freeze > requirements.txt` 生成)
    - [ ] 定期审查并更新依赖库，处理潜在的安全漏洞
    - [ ] (可选推荐) 考虑使用 Poetry 或 PDM 替换 `requirements.txt`，以获得更强大的依赖解析、环境管理和打包功能
- [ ] **代码风格一致性**
    - [ ] 引入并配置代码格式化工具 (如 Black, Ruff Formatter) 和Linter (如 Ruff, Flake8, Pylint)
    - [ ] 在项目中统一代码风格，并考虑集成到 pre-commit hooks

## 进行中
- [ ] (根据实际开发进度更新此部分)

## 开发完成待测试
- [ ] (根据实际开发进度更新此部分)

## 已完成
- [x] 项目整体功能初步分析
- [x] 阅读核心文档 (`README.md`, `多因子模型系统完整指南.md`)
- [x] 根据分析结果整理优化建议并更新至此任务列表
