---
description: 
globs: 
alwaysApply: false
---
# Text2SQLÂäüËÉΩÂºÄÂèëËÆ°Âàí

## üìã È°πÁõÆÊ¶ÇËø∞
Âú®Áé∞ÊúâÂ§öÂõ†Â≠êÊ®°ÂûãÁ≥ªÁªüÂü∫Á°Ä‰∏äÔºåÈõÜÊàêtext2sqlÂäüËÉΩÔºåËÆ©Áî®Êà∑ÈÄöËøáËá™ÁÑ∂ËØ≠Ë®ÄÊü•ËØ¢ËÇ°Á•®Êï∞ÊçÆÂíåÂõ†Â≠ê‰ø°ÊÅØÔºåÂÆûÁé∞Êô∫ËÉΩÂåñÁöÑÊï∞ÊçÆÂàÜÊûêÂíåÊäïËµÑÂÜ≥Á≠ñÊîØÊåÅ„ÄÇ

## üéØ ÂäüËÉΩÁÇπÂàÜÊûê

### 1. Ê†∏ÂøÉÂäüËÉΩÊ®°Âùó

#### 1.1 Ëá™ÁÑ∂ËØ≠Ë®ÄÁêÜËß£Ê®°Âùó (NLU)
- [x] **ÊÑèÂõæËØÜÂà´** - ËØÜÂà´Áî®Êà∑Êü•ËØ¢ÊÑèÂõæÔºàËÇ°Á•®Á≠õÈÄâ„ÄÅÂõ†Â≠êÂàÜÊûê„ÄÅÊäÄÊúØÊåáÊ†áÊü•ËØ¢Á≠âÔºâ
- [x] **ÂÆû‰ΩìÊäΩÂèñ** - ÊèêÂèñËÇ°Á•®‰ª£Á†Å„ÄÅÊó•Êúü„ÄÅÊï∞ÂÄºËåÉÂõ¥„ÄÅÊäÄÊúØÊåáÊ†áÂêçÁß∞Á≠â
- [x] **ËØ≠‰πâËß£Êûê** - ÁêÜËß£Â§çÊùÇÁöÑÊü•ËØ¢Êù°‰ª∂ÂíåÈÄªËæëÂÖ≥Á≥ª
- [x] **‰∏ä‰∏ãÊñáÁÆ°ÁêÜ** - ÊîØÊåÅÂ§öËΩÆÂØπËØùÂíå‰∏ä‰∏ãÊñáÁõ∏ÂÖ≥Êü•ËØ¢

#### 1.2 SQLÁîüÊàêÊ®°Âùó
- [x] **Ê®°ÊùøÂåπÈÖç** - Âü∫‰∫éÈ¢ÑÂÆö‰πâÊ®°ÊùøÁîüÊàêSQL
- [x] **Âä®ÊÄÅSQLÊûÑÂª∫** - Ê†πÊçÆËß£ÊûêÁªìÊûúÂä®ÊÄÅÊûÑÂª∫Â§çÊùÇÊü•ËØ¢
- [x] **Â§öË°®ÂÖ≥ËÅî** - ÊîØÊåÅË∑®Ë°®Êü•ËØ¢ÂíåÂ§çÊùÇJOINÊìç‰Ωú
- [x] **Êü•ËØ¢‰ºòÂåñ** - SQLÊÄßËÉΩ‰ºòÂåñÂíåÊâßË°åËÆ°ÂàíÂàÜÊûê

#### 1.3 ÁªìÊûúÂ§ÑÁêÜÊ®°Âùó
- [x] **Êï∞ÊçÆÊ†ºÂºèÂåñ** - Â∞ÜÊü•ËØ¢ÁªìÊûúËΩ¨Êç¢‰∏∫Áî®Êà∑ÂèãÂ•ΩÁöÑÊ†ºÂºè
- [x] **ÂõæË°®ÁîüÊàê** - Ëá™Âä®ÁîüÊàêÁõ∏ÂÖ≥ÁöÑÂèØËßÜÂåñÂõæË°®
- [x] **ÁªìÊûúËß£Èáä** - Êèê‰æõÊü•ËØ¢ÁªìÊûúÁöÑ‰∏öÂä°Ëß£Èáä
- [x] **ÂØºÂá∫ÂäüËÉΩ** - ÊîØÊåÅÂ§öÁßçÊ†ºÂºèÁöÑÊï∞ÊçÆÂØºÂá∫

### 2. Êï∞ÊçÆÈõÜÊàêÊ®°Âùó

#### 2.1 Êï∞ÊçÆÊ∫êÊï¥Âêà
- [x] **ËÇ°Á•®Âü∫Á°ÄÊï∞ÊçÆ** - Êï¥Âêàstock_basic„ÄÅstock_daily_historyÁ≠âË°®
- [x] **ÊäÄÊúØÊåáÊ†áÊï∞ÊçÆ** - Êï¥Âêàstock_factor„ÄÅstock_ma_dataÁ≠âÊäÄÊúØÈù¢Êï∞ÊçÆ
- [x] **Âü∫Êú¨Èù¢Êï∞ÊçÆ** - Êï¥ÂêàË¥¢Âä°Êä•Ë°®Êï∞ÊçÆÔºàÂà©Ê∂¶Ë°®„ÄÅËµÑ‰∫ßË¥üÂÄ∫Ë°®„ÄÅÁé∞ÈáëÊµÅÈáèË°®Ôºâ
- [x] **ËµÑÈáëÊµÅÂêëÊï∞ÊçÆ** - Êï¥Âêàstock_moneyflow„ÄÅstock_moneyflow_thsÁ≠âËµÑÈáëÈù¢Êï∞ÊçÆ
- [x] **Âõ†Â≠êÊï∞ÊçÆ** - Êï¥Âêàfactor_values„ÄÅfactor_definitionÁ≠âMLÂõ†Â≠êÊï∞ÊçÆ

#### 2.2 Êï∞ÊçÆÊò†Â∞ÑÂíåÂÖÉÊï∞ÊçÆÁÆ°ÁêÜ
- [x] **Â≠óÊÆµÊò†Â∞ÑË°®** - Âª∫Á´ãËá™ÁÑ∂ËØ≠Ë®ÄÂà∞Êï∞ÊçÆÂ∫ìÂ≠óÊÆµÁöÑÊò†Â∞ÑÂÖ≥Á≥ª
- [x] **‰∏öÂä°ËØçÂÖ∏** - Áª¥Êä§ËÇ°Á•®„ÄÅÊåáÊ†á„ÄÅË°å‰∏öÁ≠â‰∏öÂä°ÊúØËØ≠ËØçÂÖ∏
- [x] **Êï∞ÊçÆË°ÄÁºò** - ËøΩË∏™Êï∞ÊçÆÊù•Ê∫êÂíåËÆ°ÁÆóÈÄªËæë
- [x] **Êï∞ÊçÆË¥®ÈáèÁõëÊéß** - ÁõëÊéßÊï∞ÊçÆÂÆåÊï¥ÊÄßÂíåÂáÜÁ°ÆÊÄß

## üöÄ ÂºÄÂèëËÆ°Âàí

### Á¨¨‰∏ÄÈò∂ÊÆµÔºöÂü∫Á°ÄÊû∂ÊûÑÊê≠Âª∫ (1-2Âë®)

#### 1.1 Text2SQLÊúçÂä°Êû∂ÊûÑËÆæËÆ°
```python
# app/services/text2sql_engine.py
class Text2SQLEngine:
    """Text2SQLÂºïÊìé"""
    
    def __init__(self):
        self.nlp_processor = NLPProcessor()
        self.sql_generator = SQLGenerator()
        self.query_executor = QueryExecutor()
        self.result_formatter = ResultFormatter()
    
    def process_query(self, user_query: str) -> Dict[str, Any]:
        """Â§ÑÁêÜÁî®Êà∑Êü•ËØ¢"""
        # 1. Ëá™ÁÑ∂ËØ≠Ë®ÄÁêÜËß£
        intent_result = self.nlp_processor.parse_intent(user_query)
        
        # 2. SQLÁîüÊàê
        sql_query = self.sql_generator.generate_sql(intent_result)
        
        # 3. ÊâßË°åÊü•ËØ¢
        query_result = self.query_executor.execute(sql_query)
        
        # 4. ÁªìÊûúÊ†ºÂºèÂåñ
        formatted_result = self.result_formatter.format(query_result)
        
        return formatted_result
```

#### 1.2 Êï∞ÊçÆÂ∫ìÂÖÉÊï∞ÊçÆÁÆ°ÁêÜ
```python
# app/models/text2sql_metadata.py
class TableMetadata(db.Model):
    """Ë°®ÂÖÉÊï∞ÊçÆ"""
    __tablename__ = 'table_metadata'
    
    table_name = db.Column(db.String(100), primary_key=True)
    table_alias = db.Column(db.String(100))
    description = db.Column(db.Text)
    business_domain = db.Column(db.String(50))  # ÊäÄÊúØÈù¢„ÄÅÂü∫Êú¨Èù¢„ÄÅËµÑÈáëÈù¢Á≠â

class FieldMetadata(db.Model):
    """Â≠óÊÆµÂÖÉÊï∞ÊçÆ"""
    __tablename__ = 'field_metadata'
    
    table_name = db.Column(db.String(100), primary_key=True)
    field_name = db.Column(db.String(100), primary_key=True)
    field_alias = db.Column(db.String(100))
    field_type = db.Column(db.String(50))
    description = db.Column(db.Text)
    business_meaning = db.Column(db.Text)
    synonyms = db.Column(db.JSON)  # Âêå‰πâËØçÂàóË°®

class QueryTemplate(db.Model):
    """Êü•ËØ¢Ê®°Êùø"""
    __tablename__ = 'query_template'
    
    template_id = db.Column(db.String(50), primary_key=True)
    template_name = db.Column(db.String(100))
    intent_pattern = db.Column(db.Text)  # ÊÑèÂõæÂåπÈÖçÊ®°Âºè
    sql_template = db.Column(db.Text)    # SQLÊ®°Êùø
    parameters = db.Column(db.JSON)      # ÂèÇÊï∞ÂÆö‰πâ
```

### Á¨¨‰∫åÈò∂ÊÆµÔºöËá™ÁÑ∂ËØ≠Ë®ÄÂ§ÑÁêÜ (2-3Âë®)

#### 2.1 ÊÑèÂõæËØÜÂà´ÂíåÂÆû‰ΩìÊäΩÂèñ
```python
# app/services/nlp_processor.py
class NLPProcessor:
    """Ëá™ÁÑ∂ËØ≠Ë®ÄÂ§ÑÁêÜÂô®"""
    
    def __init__(self):
        self.intent_classifier = IntentClassifier()
        self.entity_extractor = EntityExtractor()
        self.business_dict = BusinessDictionary()
    
    def parse_intent(self, user_query: str) -> Dict[str, Any]:
        """Ëß£ÊûêÁî®Êà∑ÊÑèÂõæ"""
        # 1. È¢ÑÂ§ÑÁêÜ
        cleaned_query = self._preprocess(user_query)
        
        # 2. ÊÑèÂõæÂàÜÁ±ª
        intent = self.intent_classifier.classify(cleaned_query)
        
        # 3. ÂÆû‰ΩìÊäΩÂèñ
        entities = self.entity_extractor.extract(cleaned_query)
        
        # 4. ‰∏öÂä°ÊúØËØ≠Ê†áÂáÜÂåñ
        normalized_entities = self.business_dict.normalize(entities)
        
        return {
            'original_query': user_query,
            'cleaned_query': cleaned_query,
            'intent': intent,
            'entities': normalized_entities,
            'confidence': intent.get('confidence', 0.0)
        }

class IntentClassifier:
    """ÊÑèÂõæÂàÜÁ±ªÂô®"""
    
    INTENT_PATTERNS = {
        'stock_screening': [
            r'Á≠õÈÄâ.*ËÇ°Á•®', r'Êâæ.*ËÇ°Á•®', r'Âì™‰∫õËÇ°Á•®', r'ËÇ°Á•®.*Êù°‰ª∂',
            r'Ê∂®ÂπÖ.*ËÇ°Á•®', r'Ë∑åÂπÖ.*ËÇ°Á•®', r'Êàê‰∫§Èáè.*ËÇ°Á•®'
        ],
        'factor_analysis': [
            r'Âõ†Â≠ê.*ÂàÜÊûê', r'.*Âõ†Â≠ê.*ÊéíÂêç', r'Âõ†Â≠ê.*ÂàÜÂ∏É',
            r'ÊäÄÊúØÊåáÊ†á.*ÂàÜÊûê', r'Âü∫Êú¨Èù¢.*ÂàÜÊûê'
        ],
        'technical_indicator': [
            r'MACD.*', r'KDJ.*', r'RSI.*', r'Â∏ÉÊûóÂ∏¶.*',
            r'ÂùáÁ∫ø.*', r'Êàê‰∫§Èáè.*', r'Êç¢ÊâãÁéá.*'
        ],
        'fundamental_analysis': [
            r'PE.*', r'PB.*', r'ROE.*', r'Ëê•Êî∂.*', r'Âà©Ê∂¶.*',
            r'Â∏ÇÁõàÁéá.*', r'Â∏ÇÂáÄÁéá.*', r'Ë¥¢Âä°.*'
        ],
        'money_flow': [
            r'ËµÑÈáëÊµÅ.*', r'Â§ßÂçï.*', r'‰∏ªÂäõ.*', r'Êú∫ÊûÑ.*',
            r'ÂáÄÊµÅÂÖ•.*', r'ÂáÄÊµÅÂá∫.*'
        ]
    }
```

#### 2.2 ‰∏öÂä°ËØçÂÖ∏ÂíåÂêå‰πâËØçÁÆ°ÁêÜ
```python
# app/services/business_dictionary.py
class BusinessDictionary:
    """‰∏öÂä°ËØçÂÖ∏"""
    
    def __init__(self):
        self.stock_synonyms = {
            'ËÇ°Á•®‰ª£Á†Å': ['‰ª£Á†Å', 'ËØÅÂà∏‰ª£Á†Å', 'ts_code', 'ËÇ°Á•®'],
            'Êî∂Áõò‰ª∑': ['Êî∂Áõò', 'Êî∂‰ª∑', 'close', '‰ª∑Ê†º'],
            'Ê∂®Ë∑åÂπÖ': ['Ê∂®ÂπÖ', 'Ë∑åÂπÖ', 'Ê∂®Ë∑å', 'pct_change', 'Ê∂®Ë∑åÁéá'],
            'Êàê‰∫§Èáè': ['Èáè', 'vol', 'volume', '‰∫§ÊòìÈáè'],
            'Êàê‰∫§È¢ù': ['È¢ù', 'amount', '‰∫§ÊòìÈ¢ù', 'Êàê‰∫§ÈáëÈ¢ù'],
            'Â∏ÇÁõàÁéá': ['PE', 'pe_ttm', 'P/E'],
            'Â∏ÇÂáÄÁéá': ['PB', 'pb', 'P/B'],
            'Êç¢ÊâãÁéá': ['turnover_rate', 'Êç¢Êâã'],
            'MACD': ['macd', 'MACDÊåáÊ†á', 'macd_dif', 'macd_dea'],
            'RSI': ['rsi', 'RSIÊåáÊ†á', 'rsi_6', 'rsi_12', 'rsi_24'],
            'ÂùáÁ∫ø': ['MA', 'ma', 'ÁßªÂä®Âπ≥ÂùáÁ∫ø', 'ma5', 'ma10', 'ma20']
        }
        
        self.condition_synonyms = {
            'Â§ß‰∫é': ['>', 'Ë∂ÖËøá', 'È´ò‰∫é', 'Â§ß‰∫éÁ≠â‰∫é', '>='],
            'Â∞è‰∫é': ['<', '‰Ωé‰∫é', 'Â∞ë‰∫é', 'Â∞è‰∫éÁ≠â‰∫é', '<='],
            'Á≠â‰∫é': ['=', 'Á≠â‰∫é', 'ÊòØ', '‰∏∫'],
            'ÊéíÂ∫è': ['ÊéíÂêç', 'ÊéíÂ∫è', 'ÊéíÂàó', 'order by'],
            'Ââç': ['Ââç', 'top', 'ÊúÄÈ´ò', 'ÊúÄÂ§ß'],
            'Âêé': ['Âêé', 'bottom', 'ÊúÄ‰Ωé', 'ÊúÄÂ∞è']
        }
```

### Á¨¨‰∏âÈò∂ÊÆµÔºöSQLÁîüÊàêÂºïÊìé (2-3Âë®)

#### 3.1 SQLÊ®°ÊùøÁ≥ªÁªü
```python
# app/services/sql_generator.py
class SQLGenerator:
    """SQLÁîüÊàêÂô®"""
    
    def __init__(self):
        self.template_manager = TemplateManager()
        self.query_builder = QueryBuilder()
    
    def generate_sql(self, intent_result: Dict[str, Any]) -> str:
        """ÁîüÊàêSQLÊü•ËØ¢"""
        intent = intent_result['intent']['name']
        entities = intent_result['entities']
        
        # 1. ÈÄâÊã©ÂêàÈÄÇÁöÑÊ®°Êùø
        template = self.template_manager.get_template(intent, entities)
        
        # 2. ÊûÑÂª∫SQL
        if template:
            sql = self._build_from_template(template, entities)
        else:
            sql = self.query_builder.build_dynamic_sql(intent, entities)
        
        # 3. SQL‰ºòÂåñ
        optimized_sql = self._optimize_sql(sql)
        
        return optimized_sql

class TemplateManager:
    """Ê®°ÊùøÁÆ°ÁêÜÂô®"""
    
    TEMPLATES = {
        'stock_screening_by_price': {
            'pattern': r'Êî∂Áõò‰ª∑.*Â§ß‰∫é.*ÁöÑËÇ°Á•®',
            'sql': '''
                SELECT ts_code, stock_name, close, pct_change, vol
                FROM stock_business 
                WHERE close > {price_threshold}
                ORDER BY close DESC
                LIMIT {limit}
            ''',
            'parameters': ['price_threshold', 'limit']
        },
        
        'stock_screening_by_pct_change': {
            'pattern': r'Ê∂®ÂπÖ.*Â§ß‰∫é.*ÁöÑËÇ°Á•®',
            'sql': '''
                SELECT ts_code, stock_name, daily_close, factor_pct_change, vol
                FROM stock_business 
                WHERE factor_pct_change > {pct_threshold}
                ORDER BY factor_pct_change DESC
                LIMIT {limit}
            ''',
            'parameters': ['pct_threshold', 'limit']
        },
        
        'technical_indicator_analysis': {
            'pattern': r'MACD.*ÈáëÂèâ.*ËÇ°Á•®',
            'sql': '''
                SELECT sb.ts_code, sb.stock_name, sf.macd_dif, sf.macd_dea, sf.macd
                FROM stock_business sb
                JOIN stock_factor sf ON sb.ts_code = sf.ts_code
                WHERE sf.macd_dif > sf.macd_dea 
                AND sf.trade_date = (
                    SELECT MAX(trade_date) FROM stock_factor WHERE ts_code = sb.ts_code
                )
                ORDER BY sf.macd DESC
                LIMIT {limit}
            ''',
            'parameters': ['limit']
        }
    }
```

#### 3.2 Âä®ÊÄÅSQLÊûÑÂª∫Âô®
```python
# app/services/query_builder.py
class QueryBuilder:
    """Âä®ÊÄÅÊü•ËØ¢ÊûÑÂª∫Âô®"""
    
    def build_dynamic_sql(self, intent: str, entities: Dict[str, Any]) -> str:
        """Âä®ÊÄÅÊûÑÂª∫SQL"""
        
        # 1. Á°ÆÂÆö‰∏ªË°®
        main_table = self._determine_main_table(intent, entities)
        
        # 2. ÊûÑÂª∫SELECTÂ≠êÂè•
        select_clause = self._build_select_clause(entities)
        
        # 3. ÊûÑÂª∫FROMÂ≠êÂè•ÔºàÂåÖÂê´JOINÔºâ
        from_clause = self._build_from_clause(main_table, entities)
        
        # 4. ÊûÑÂª∫WHEREÂ≠êÂè•
        where_clause = self._build_where_clause(entities)
        
        # 5. ÊûÑÂª∫ORDER BYÂ≠êÂè•
        order_clause = self._build_order_clause(entities)
        
        # 6. ÊûÑÂª∫LIMITÂ≠êÂè•
        limit_clause = self._build_limit_clause(entities)
        
        sql = f"""
            {select_clause}
            {from_clause}
            {where_clause}
            {order_clause}
            {limit_clause}
        """
        
        return sql.strip()
    
    def _determine_main_table(self, intent: str, entities: Dict[str, Any]) -> str:
        """Á°ÆÂÆö‰∏ªË°®"""
        if intent in ['stock_screening', 'fundamental_analysis']:
            return 'stock_business'
        elif intent == 'technical_indicator':
            return 'stock_factor'
        elif intent == 'money_flow':
            return 'stock_moneyflow'
        elif intent == 'factor_analysis':
            return 'factor_values'
        else:
            return 'stock_business'  # ÈªòËÆ§‰∏ªË°®
```

### Á¨¨ÂõõÈò∂ÊÆµÔºöWebÁïåÈù¢ÈõÜÊàê (1-2Âë®)

#### 4.1 Text2SQLÈ°µÈù¢
```html
<!-- app/templates/ml_factor/text2sql.html -->
<div class="container-fluid">
    <div class="row">
        <!-- Êü•ËØ¢ËæìÂÖ•Âå∫Âüü -->
        <div class="col-md-12">
            <div class="card">
                <div class="card-header">
                    <h5><i class="fas fa-comments"></i> Êô∫ËÉΩÊü•ËØ¢Âä©Êâã</h5>
                </div>
                <div class="card-body">
                    <div class="input-group mb-3">
                        <input type="text" class="form-control" id="queryInput" 
                               placeholder="ËØ∑ËæìÂÖ•ÊÇ®ÁöÑÊü•ËØ¢Ôºå‰æãÂ¶ÇÔºöÊâæÂá∫Ê∂®ÂπÖÂ§ß‰∫é5%ÁöÑËÇ°Á•®">
                        <button class="btn btn-primary" type="button" id="queryBtn">
                            <i class="fas fa-search"></i> Êü•ËØ¢
                        </button>
                    </div>
                    
                    <!-- Êü•ËØ¢Âª∫ËÆÆ -->
                    <div class="query-suggestions">
                        <small class="text-muted">Êü•ËØ¢Á§∫‰æãÔºö</small>
                        <div class="mt-2">
                            <span class="badge bg-light text-dark me-2 query-example">ÊâæÂá∫Êî∂Áõò‰ª∑Â§ß‰∫é100ÂÖÉÁöÑËÇ°Á•®</span>
                            <span class="badge bg-light text-dark me-2 query-example">MACDÈáëÂèâÁöÑËÇ°Á•®ÊúâÂì™‰∫õ</span>
                            <span class="badge bg-light text-dark me-2 query-example">PEÂ∞è‰∫é20ÁöÑËÇ°Á•®ÊéíÂêç</span>
                            <span class="badge bg-light text-dark me-2 query-example">ËµÑÈáëÂáÄÊµÅÂÖ•ÊúÄÂ§öÁöÑ10Âè™ËÇ°Á•®</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Êü•ËØ¢ÁªìÊûúÂå∫Âüü -->
    <div class="row mt-4" id="resultArea" style="display: none;">
        <!-- SQLËß£ÊûêÁªìÊûú -->
        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <h6><i class="fas fa-code"></i> Êü•ËØ¢Ëß£Êûê</h6>
                </div>
                <div class="card-body">
                    <div id="intentResult"></div>
                    <div id="sqlResult"></div>
                </div>
            </div>
        </div>
        
        <!-- Êï∞ÊçÆÁªìÊûú -->
        <div class="col-md-8">
            <div class="card">
                <div class="card-header d-flex justify-content-between">
                    <h6><i class="fas fa-table"></i> Êü•ËØ¢ÁªìÊûú</h6>
                    <div>
                        <button class="btn btn-sm btn-outline-primary" id="exportBtn">
                            <i class="fas fa-download"></i> ÂØºÂá∫
                        </button>
                        <button class="btn btn-sm btn-outline-secondary" id="chartBtn">
                            <i class="fas fa-chart-bar"></i> ÂõæË°®
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    <div id="dataTable"></div>
                    <div id="chartContainer" style="display: none;"></div>
                </div>
            </div>
        </div>
    </div>
</div>
```

#### 4.2 APIÊé•Âè£
```python
# app/api/text2sql_api.py
@text2sql_bp.route('/query', methods=['POST'])
def process_query():
    """Â§ÑÁêÜËá™ÁÑ∂ËØ≠Ë®ÄÊü•ËØ¢"""
    try:
        data = request.get_json()
        user_query = data.get('query', '').strip()
        
        if not user_query:
            return jsonify({'error': 'Êü•ËØ¢ÂÜÖÂÆπ‰∏çËÉΩ‰∏∫Á©∫'}), 400
        
        # Â§ÑÁêÜÊü•ËØ¢
        result = get_text2sql_engine().process_query(user_query)
        
        return jsonify({
            'success': True,
            'query': user_query,
            'intent': result['intent'],
            'sql': result['sql'],
            'data': result['data'],
            'chart_config': result.get('chart_config'),
            'explanation': result.get('explanation')
        })
        
    except Exception as e:
        logger.error(f"Â§ÑÁêÜÊü•ËØ¢Â§±Ë¥•: {e}")
        return jsonify({'error': str(e)}), 500

@text2sql_bp.route('/suggestions', methods=['GET'])
def get_query_suggestions():
    """Ëé∑ÂèñÊü•ËØ¢Âª∫ËÆÆ"""
    try:
        suggestions = get_text2sql_engine().get_query_suggestions()
        return jsonify({
            'success': True,
            'suggestions': suggestions
        })
    except Exception as e:
        return jsonify({'error': str(e)}), 500
```

### Á¨¨‰∫îÈò∂ÊÆµÔºöÊµãËØïÂíå‰ºòÂåñ (1-2Âë®)

#### 5.1 ÊµãËØïÁî®‰æãËÆæËÆ°
```python
# tests/test_text2sql.py
class TestText2SQL:
    """Text2SQLÂäüËÉΩÊµãËØï"""
    
    def test_stock_screening_queries(self):
        """ÊµãËØïËÇ°Á•®Á≠õÈÄâÊü•ËØ¢"""
        test_cases = [
            {
                'query': 'ÊâæÂá∫Êî∂Áõò‰ª∑Â§ß‰∫é100ÂÖÉÁöÑËÇ°Á•®',
                'expected_intent': 'stock_screening',
                'expected_entities': {'price_threshold': 100, 'field': 'close'}
            },
            {
                'query': 'Ê∂®ÂπÖË∂ÖËøá5%ÁöÑËÇ°Á•®ÊúâÂì™‰∫õ',
                'expected_intent': 'stock_screening',
                'expected_entities': {'pct_threshold': 5, 'field': 'pct_change'}
            }
        ]
        
        for case in test_cases:
            result = self.text2sql_engine.process_query(case['query'])
            assert result['intent']['name'] == case['expected_intent']
    
    def test_technical_indicator_queries(self):
        """ÊµãËØïÊäÄÊúØÊåáÊ†áÊü•ËØ¢"""
        test_cases = [
            'MACDÈáëÂèâÁöÑËÇ°Á•®',
            'RSIË∂Ö‰π∞ÁöÑËÇ°Á•®',
            'Â∏ÉÊûóÂ∏¶Á™ÅÁ†¥ÁöÑËÇ°Á•®',
            'ÂùáÁ∫øÂ§öÂ§¥ÊéíÂàóÁöÑËÇ°Á•®'
        ]
        
        for query in test_cases:
            result = self.text2sql_engine.process_query(query)
            assert result['intent']['name'] == 'technical_indicator'
            assert len(result['data']) > 0
```

## üìä Êï∞ÊçÆË°®ËÆæËÆ°

### Text2SQLÂÖÉÊï∞ÊçÆË°®
```sql
-- Ë°®ÂÖÉÊï∞ÊçÆ
CREATE TABLE `table_metadata` (
  `table_name` varchar(100) NOT NULL COMMENT 'Ë°®Âêç',
  `table_alias` varchar(100) COMMENT 'Ë°®Âà´Âêç',
  `description` text COMMENT 'Ë°®ÊèèËø∞',
  `business_domain` varchar(50) COMMENT '‰∏öÂä°Âüü',
  `is_active` tinyint(1) DEFAULT 1,
  PRIMARY KEY (`table_name`)
) COMMENT='Ë°®ÂÖÉÊï∞ÊçÆ';

-- Â≠óÊÆµÂÖÉÊï∞ÊçÆ
CREATE TABLE `field_metadata` (
  `table_name` varchar(100) NOT NULL,
  `field_name` varchar(100) NOT NULL,
  `field_alias` varchar(100) COMMENT 'Â≠óÊÆµÂà´Âêç',
  `field_type` varchar(50) COMMENT 'Â≠óÊÆµÁ±ªÂûã',
  `description` text COMMENT 'Â≠óÊÆµÊèèËø∞',
  `business_meaning` text COMMENT '‰∏öÂä°Âê´‰πâ',
  `synonyms` json COMMENT 'Âêå‰πâËØç',
  `is_active` tinyint(1) DEFAULT 1,
  PRIMARY KEY (`table_name`, `field_name`)
) COMMENT='Â≠óÊÆµÂÖÉÊï∞ÊçÆ';

-- Êü•ËØ¢Ê®°Êùø
CREATE TABLE `query_template` (
  `template_id` varchar(50) NOT NULL,
  `template_name` varchar(100) NOT NULL,
  `intent_pattern` text COMMENT 'ÊÑèÂõæÂåπÈÖçÊ®°Âºè',
  `sql_template` text COMMENT 'SQLÊ®°Êùø',
  `parameters` json COMMENT 'ÂèÇÊï∞ÂÆö‰πâ',
  `usage_count` int DEFAULT 0 COMMENT '‰ΩøÁî®Ê¨°Êï∞',
  `is_active` tinyint(1) DEFAULT 1,
  PRIMARY KEY (`template_id`)
) COMMENT='Êü•ËØ¢Ê®°Êùø';

-- Êü•ËØ¢ÂéÜÂè≤
CREATE TABLE `query_history` (
  `id` bigint AUTO_INCREMENT,
  `user_query` text NOT NULL COMMENT 'Áî®Êà∑Êü•ËØ¢',
  `intent` varchar(50) COMMENT 'ËØÜÂà´ÊÑèÂõæ',
  `generated_sql` text COMMENT 'ÁîüÊàêÁöÑSQL',
  `execution_time` decimal(10,3) COMMENT 'ÊâßË°åÊó∂Èó¥(Áßí)',
  `result_count` int COMMENT 'ÁªìÊûúÊï∞Èáè',
  `is_successful` tinyint(1) COMMENT 'ÊòØÂê¶ÊàêÂäü',
  `error_message` text COMMENT 'ÈîôËØØ‰ø°ÊÅØ',
  `created_at` timestamp DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) COMMENT='Êü•ËØ¢ÂéÜÂè≤';
```

## üéØ ÂäüËÉΩÁâπÊÄß

### ÊîØÊåÅÁöÑÊü•ËØ¢Á±ªÂûã

#### 1. ËÇ°Á•®Á≠õÈÄâÊü•ËØ¢
- "ÊâæÂá∫Ê∂®ÂπÖÂ§ß‰∫é5%ÁöÑËÇ°Á•®"
- "Êî∂Áõò‰ª∑Âú®50-100ÂÖÉ‰πãÈó¥ÁöÑËÇ°Á•®"
- "Êàê‰∫§ÈáèÂâç20ÂêçÁöÑËÇ°Á•®"
- "Â∏ÇÁõàÁéáÂ∞è‰∫é20ÁöÑËÇ°Á•®"

#### 2. ÊäÄÊúØÊåáÊ†áÊü•ËØ¢
- "MACDÈáëÂèâÁöÑËÇ°Á•®ÊúâÂì™‰∫õ"
- "RSIË∂Ö‰π∞ÁöÑËÇ°Á•®"
- "Â∏ÉÊûóÂ∏¶‰∏äËΩ®Á™ÅÁ†¥ÁöÑËÇ°Á•®"
- "5Êó•ÂùáÁ∫ø‰∏äÁ©ø20Êó•ÂùáÁ∫øÁöÑËÇ°Á•®"

#### 3. Âü∫Êú¨Èù¢ÂàÜÊûê
- "ROEÂ§ß‰∫é15%ÁöÑËÇ°Á•®"
- "Ëê•Êî∂Â¢ûÈïøÁéáÊúÄÈ´òÁöÑ10Âè™ËÇ°Á•®"
- "Ë¥üÂÄ∫ÁéáÊúÄ‰ΩéÁöÑËÇ°Á•®"
- "Áé∞ÈáëÊµÅÊúÄÂ•ΩÁöÑËÇ°Á•®"

#### 4. ËµÑÈáëÊµÅÂêëÂàÜÊûê
- "‰∏ªÂäõËµÑÈáëÂáÄÊµÅÂÖ•ÊúÄÂ§öÁöÑËÇ°Á•®"
- "Â§ßÂçï‰π∞ÂÖ•ÊØî‰æãÊúÄÈ´òÁöÑËÇ°Á•®"
- "ËøûÁª≠3Â§©ËµÑÈáëÂáÄÊµÅÂÖ•ÁöÑËÇ°Á•®"

#### 5. Âõ†Â≠êÂàÜÊûê
- "Âä®ÈáèÂõ†Â≠êÊéíÂêçÂâç50ÁöÑËÇ°Á•®"
- "‰ª∑ÂÄºÂõ†Â≠êÂæóÂàÜÊúÄÈ´òÁöÑËÇ°Á•®"
- "Ë¥®ÈáèÂõ†Â≠êË°®Áé∞ÊúÄÂ•ΩÁöÑË°å‰∏ö"

## üìà È¢ÑÊúüÊïàÊûú

### Áî®Êà∑‰ΩìÈ™åÊèêÂçá
- **Êü•ËØ¢ÊïàÁéáÊèêÂçá80%** - ‰ªéÂ§çÊùÇSQLÁºñÂÜôÂà∞Ëá™ÁÑ∂ËØ≠Ë®ÄËæìÂÖ•
- **Â≠¶‰π†ÊàêÊú¨Èôç‰Ωé90%** - Êó†ÈúÄÊéåÊè°SQLËØ≠Ê≥ïÂíåÊï∞ÊçÆÂ∫ìÁªìÊûÑ
- **Êü•ËØ¢ÂáÜÁ°ÆÊÄßÊèêÂçá** - Êô∫ËÉΩÁ∫†ÈîôÂíåÂª∫ËÆÆÂäüËÉΩ

### Á≥ªÁªüËÉΩÂäõÂ¢ûÂº∫
- **Êü•ËØ¢Ë¶ÜÁõñÁéá95%** - ÊîØÊåÅÁªùÂ§ßÂ§öÊï∞Â∏∏ËßÅÊü•ËØ¢Âú∫ÊôØ
- **ÂìçÂ∫îÊó∂Èó¥<2Áßí** - Âø´ÈÄüÁöÑÊÑèÂõæËØÜÂà´ÂíåSQLÁîüÊàê
- **Êâ©Â±ïÊÄßÂº∫** - Êòì‰∫éÊ∑ªÂä†Êñ∞ÁöÑÊü•ËØ¢Ê®°ÊùøÂíå‰∏öÂä°ËßÑÂàô

Ëøô‰∏™ÂºÄÂèëËÆ°ÂàíÂ∞ÜText2SQLÂäüËÉΩ‰∏éÁé∞ÊúâÁöÑÂ§öÂõ†Â≠êÊ®°ÂûãÁ≥ªÁªüÊ∑±Â∫¶ÈõÜÊàêÔºå‰∏∫Áî®Êà∑Êèê‰æõÂº∫Â§ßÁöÑÊô∫ËÉΩÊü•ËØ¢ËÉΩÂäõÔºåÂ§ßÂ§ßÊèêÂçáÁ≥ªÁªüÁöÑÊòìÁî®ÊÄßÂíåÂÆûÁî®ÊÄß„ÄÇ
