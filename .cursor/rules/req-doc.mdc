---
description: 
globs: 
alwaysApply: false
---
下面给出一个基于已有数据库表设计的「Python 股票分析系统」的需求规划。内容包含项目背景、已有数据表说明、功能模块规划、技术选型建议及未来扩展思路等，供你在实际开发过程中参考和落地。

---

## 一、项目背景与目标

1. **项目背景**

   * 你已经在数据库中准备了多张与股票分析相关的表，包括基本信息、日线行情、技术指标、资金流向等。
   * 目标是基于这些表数据，构建一套可视化、可扩展、可定制化的 Python 股票分析系统，帮助用户快速了解个股基本面、技术面及资金面状况，提供选股、回测、预警等功能。

2. **主要目标**

   * 实现数据的自动化更新与存储，将外部数据源（如通用行情接口或第三方 API）与本地数据库对接。
   * 基于已有的历史行情（`stock_daily_history`）、日线基础数据（`stock_daily_basic`）、技术因子（`stock_factor`）、均线数据（`stock_ma_data`）、资金流向（`stock_moneyflow`）和筹码分布表（`stock_cyq_perf`），进行多维度分析。
   * 提供图表可视化界面（K 线、均线、MACD、KDJ、布林带、资金流向可视化等），帮助用户快速了解市场情况。
   * 实现常见的选股筛选策略（如均线交叉、资金流入、筹码集中度、PE/PB 筛选等）以及定制化策略回测。
   * 提供预警/通知功能（如价格突破预警、均线金叉死叉预警、资金流入异常预警等）。

---

## 二、已有数据库表说明

在正式规划系统功能之前，先概览一下已有数据库表及其主要字段，以明确可用的数据源和潜在的应用场景。

1. **股票公司基本信息表：`stock_basic`**

   * `ts_code`（主键）：通用的 TS 股票代码

   * `symbol`：股票简称代码（如 600519）

   * `name`：股票名称（如 贵州茅台）

   * `area`：地域（例如 “贵州”）

   * `industry`：所属行业（例如 “酿酒行业”）

   * `list_date`：上市日期

   > **应用场景**：用于展示行业分类、地域分布、筛选板块；也可作为其他模块的联表依据。

2. **每日筹码及胜率数据表：`stock_cyq_perf`**

   * 主键：`ts_code` + `trade_date`
   * 主要字段：

     * `his_low`、`his_high`：历史最低价/最高价

     * `cost_5pct`、`cost_15pct`、`cost_50pct`、`cost_85pct`、`cost_95pct`：不同分位的成本价

     * `weight_avg`：加权平均成本

     * `winner_rate`：胜率（同一时期内持仓盈利概率）

   > **应用场景**：用于分析筹码分布情况、成本控制，进而判断买卖时机；可以绘制成本分布图、历史价位区间统计、胜率变化曲线等。

3. **股票日线基本数据表：`stock_daily_basic`**

   * 主键：`ts_code` + `trade_date`
   * 主要字段：

     * `close`、`turnover_rate`、`turnover_rate_f`、`volume_ratio`：成交换手、量比等

     * `pe`、`pe_ttm`、`pb`、`ps`、`ps_ttm`：估值指标

     * `dv_ratio`、`dv_ttm`：股息率指标

     * `total_share`、`float_share`、`free_share`：总股本、流通股本、自由流通股本

     * `total_mv`、`circ_mv`：总市值、流通市值

   > **应用场景**：用于基本面筛选、估值分析、换手率高低判断。可制作估值分布图、换手率排名表等。

4. **股票日线行情历史数据表：`stock_daily_history`**

   * 主键：`ts_code` + `trade_date`
   * 主要字段：

     * `open`、`high`、`low`、`close`、`pre_close`、`change_c`、`pct_chg`：K 线指标

     * `vol`：成交量（手），`amount`：成交额（千元）

   > **应用场景**：最基础的历史行情，可用于绘制 K 线图、计算收益率、涨跌幅排名、成交量分析等。

5. **股票技术面因子数据表：`stock_factor`**

   * 主键：`ts_code` + `trade_date`
   * 附带指标：

     * 后复权与前复权价格：`open_hfq`、`close_hfq`、`high_hfq`、`low_hfq`、`open_qfq`、`close_qfq`、`high_qfq`、`low_qfq` 等

     * `adj_factor`：复权因子

     * MACD、KDJ 指标：`macd_dif`、`macd_dea`、`macd`、`kdj_k`、`kdj_d`、`kdj_j`

     * RSI 指标：`rsi_6`、`rsi_12`、`rsi_24`

     * 布林带：`boll_upper`、`boll_mid`、`boll_lower`

     * CCI 指标

   > **应用场景**：用于技术指标可视化（MACD/RSI/KDJ/布林带等），也可做选股过滤（如 MACD 金叉、KDJ 超买超卖、RSI 超买超卖等）。

6. **股票移动平均线数据表：`stock_ma_data`**

   * 主键：`ts_code`

   * 内容字段：`ma5`、`ma10`、`ma20`、`ma30`、`ma60`、`ma120`、`ema5`、`ema10`、`ema20`、`ema30`、`ema60`、`ema120`

   > **应用场景**：动态查询当日各条均线数值，可辅助判断均线趋势；比如金叉死叉筛选、均线多头排列或空头排列筛选、均线与股价关系等。

7. **个股资金流向数据表：`stock_moneyflow`**

   * 主键：`ts_code` + `trade_date`

   * 主要字段：分不同单数（小单、中单、大单、特大单）买入/卖出量和金额；

   * 以及当日净流入量 (`net_mf_vol`) 和净流入额 (`net_mf_amount`)

   > **应用场景**：用于分析主力资金动向、分单资金分布，可绘制资金流入流出柱状图、资金净流入折线、单种类资金比重饼图等；也可以用于资金面选股（大单净流入选股、小单活跃度判断等）。

---

## 三、系统功能模块规划

基于上述表结构和字段，我们可以将系统拆分为若干子模块。下面给出一个较为完整的功能分解与需求描述。

### 1. 数据获取与更新模块

**目标**：实现从外部数据源（如 Tushare、聚宽、Wind、Ricequant 等第三方接口）自动或手动拉取数据，将最新数据写入对应的表中，保证数据库表始终保持最新状态。

* **功能点**

  1. **接口配置与认证**

     * 在系统配置文件或管理界面配置第三方行情/技术指标/资金流向接口（API Key、Secret、Token 等）。
     * 支持多种数据源的注册、优先级配置（可兼容不同数据源格式）。
  2. **定时任务调度**

     * 使用 `schedule`、`APScheduler` 或 `Celery beat` 等实现每日收盘后自动拉取：

       * `stock_daily_history`、`stock_daily_basic`、`stock_factor`、`stock_moneyflow`、`stock_cyq_perf` 等表的增量更新。
     * 支持手动触发全量（或历史）数据更新。
  3. **数据清洗与校验**

     * 对接口返回的数据做完整性校验（如缺失值、重复记录、异常值）。
     * 将清洗后的数据写入相应表；若同一天有重复数据，则做“覆盖插入”或“忽略”。
  4. **日志与异常监控**

     * 每次更新记录日志，包含时间、拉取表名、拉取记录行数、失败原因等。
     * 当接口失效或数据异常时，通过邮件/企业微信/钉钉等方式报警。

### 2. 数据存储与基础查询模块

**目标**：提供高效的查询接口与简单封装，方便上层功能模块调用。

* **功能点**

  1. **ORM 封装**

     * 使用 `SQLAlchemy` 或 `peewee` 等 ORM，将各表建成模型类，方便 Python 代码中直接调用。
  2. **基础查询接口（API）**

     * 按日期、股票代码查询单张表数据，例如：

       * `get_daily_price(ts_code, start_date, end_date)` → 返回 `stock_daily_history` 区间行情。
       * `get_daily_basic(ts_code, trade_date)` → 当日日线基本数据。
       * `get_factor(ts_code, start_date, end_date)` → 指标因子序列。
       * `get_moneyflow(ts_code, trade_date)` → 当日/区间资金流向。
       * `get_cyq_perf(ts_code, trade_date)` → 当日筹码分布和胜率。
     * 支持批量查询（传入股票列表、日期区间，一次返回多只股票数据）。
     * 支持分页、排序、条件筛选（如某日 PE < 20 的所有股票）。
  3. **常用索引优化**

     * 针对查询频次高的字段（如 `trade_date`, `ts_code+trade_date` 等）确保已经建立二级索引；
     * 对于复杂筛选（如 `industry` + `pe_ttm`）可在 `stock_basic` 或 `stock_daily_basic` 中建立组合索引。

### 3. 数据处理与分析模块

**目标**：基于已有数据，进行多种常见的技术面、资金面、筹码面分析以及简单的策略回测，形成结果输出或可视化数据。

#### 3.1 技术面分析

1. **指标计算与验证**

   * 对比 `stock_factor` 表中的现有指标，验证其与历史行情数据的一致性。
   * 如果需要补充更多指标（如 SAR、ATR、布林带波动率、量价背离等），可在此模块实现计算脚本。
2. **技术指标可视化**

   * 绘制单只股票的 K 线图（含叠加均线、布林带、MACD 条及线、KDJ、RSI 等）。
   * 支持分时图（若后续数据源可提供分时数据）。
3. **常见技术策略筛选**

   * **均线策略**：

     * 5 日/10 日/20 日均线金叉、死叉选股；
     * 均线多头排列（5 > 10 > 20 > 60）；
     * 突破均线阻力位选股。
   * **MACD 策略**：

     * DIF 与 DEA 金叉/死叉；
     * MACD 柱状线由红转绿（或绿转红）时机。
   * **KDJ 策略**：

     * KDJ 超卖（KDJ 值 < 20）并回升选股；
     * KDJ 超买（KDJ 值 > 80）后回调预警。
   * **布林带策略**：

     * 股价突破布林上轨或下轨；
     * 股价运行在中轨之上或之下并回踩中轨。

#### 3.2 资金面分析

1. **分单资金趋势可视化**

   * 绘制小单、中单、大单、特大单买入/卖出金额柱状图或折线图；
   * 显示当日总净流入趋势、分时资金流向累积图。
2. **资金流向选股**

   * 筛选当日大单净流入排名前 N 的股票；
   * 分析连续多个交易日大单或特大单持续流入的股票；
   * 资金流与价格涨跌幅的关联分析（如大单净流入 > X 万元且涨幅 > Y% 的股票）。
3. **资金形态指标**

   * 计算并显示当日资金流入比（`net_mf_amount` / `circ_mv`），判断机构介入程度；
   * 计算流入占比（如大单流入 / 总流入）等。

#### 3.3 筹码面（成本分布）分析

1. **成本分位曲线可视化**

   * 绘制当日或区间内 `cost_5pct`、`cost_15pct`、`cost_50pct`、`cost_85pct`、`cost_95pct` 的变化趋势；
   * 将筹码分布与历史低点/高点、股价位置作对比，判断筹码集中区间。
2. **胜率分析与建仓/离场建议**

   * 根据 `winner_rate` 曲线判断在不同价格区间的胜率变化；
   * 当胜率出现显著拐点（如从 30% 提升到 60%）时，给予参考提示。
3. **筹码分布热力图或柱状图**

   * 若后期有更精细的筹码分布（如更多分布坐标或密度数据），可绘制直方图或热力图。

#### 3.4 基本面估值 & 排名

1. **估值指标筛选**

   * 根据 `stock_daily_basic` 中的 `pe`、`pe_ttm`、`pb`、`ps` 等字段进行简单估值过滤。
   * 支持市值筛选：`total_mv`、`circ_mv` 排序。
2. **换手率、量比筛选**

   * 当日换手率超过一定阈值（如 5%）筛选活跃个股；
   * 量比（`volume_ratio`）大于某个数值作为关注标的。
3. **多条件综合筛选**

   * 组合多个条件（如：PE < 20 且 大单净流入 > 500 万 且 均线多头排列）筛选候选池。

#### 3.5 策略回测模块

1. **简单策略框架**

   * 定义进出场规则（如均线金叉买入、死叉卖出）；
   * 支持日线级别回测，以 `stock_daily_history` 或 `stock_factor` 表数据为基础；
   * 计算策略收益、夏普比率、最大回撤等绩效指标。
2. **多策略组合回测**

   * 支持多种技术选股条件组合回测；
   * 可以对比不同策略在相同时间段、相同标的池下的绩效差异。
3. **回测结果可视化**

   * 绘制策略净值曲线、回撤曲线、持仓明细表、交易日志表；
   * 支持将回测报告导出为 HTML/Excel/PDF。

### 4. 前端展示与交互模块

**目标**：为用户提供可视化界面，包含图表、数据表、筛选条件设置、策略管理、预警配置等。

1. **Web 系统或桌面客户端**

   * **Web 端**：

     * 使用 Flask、Django、FastAPI 结合前端框架（Vue、React、Ant Design/Vant 等）搭建界面。
     * 也可借助国内流行的可视化平台，如 Streamlit、Dash、Tornado + ECharts 快速搭建。
   * **桌面端**（可选）：

     * 使用 PyQt、Tkinter 或 Electron 打包前端页面，实现跨平台桌面应用。
2. **主要界面与功能**

   1. **首页概览**

      * 展示当日主要指数涨跌、整体市场资金流向概况、热门板块榜单、热门个股榜单。
   2. **个股详细页面**

      * 上方基本信息：`stock_basic` 中的名称、行业、地域、上市日期等。
      * K 线图 + 技术指标叠加：内置均线（MA5/10/20/60/120）、MACD、KDJ、布林带、RSI 等。
      * 日线基本指标：当日收盘价、换手率、量比、估值指标、总市值/流通市值。
      * 资金流向图：小单/中单/大单/特大单买卖对比柱状图、净流入折线图。
      * 筹码分布：成本分位曲线、历史高低价标注、胜率折线图。
      * 均线表格：当日 MA5/10/20/60/120、EMA5/10/20/30/60/120 数值。
   3. **选股筛选页面**

      * 用户可自定义条件（估值、换手、资金流、技术指标）进行筛选，实时返回符合条件的股票列表。
      * 支持保存常用筛选条件为“模板”，一键复用。
   4. **策略回测页面**

      * 用户定义策略参数（如均线周期、金叉死叉条件、资金流阈值等），点击“回测”后展示回测结果。
      * 可视化净值曲线、回撤图、绩效指标、交易明细表。
      * 支持将回测结果保存或导出。
   5. **自选/持仓管理页面**

      * 用户可导入/填写自选股列表，查看自选股的实时行情、资金流、技术指标等。
      * 支持批量导入/导出 Excel。
   6. **预警配置页面**

      * 支持对单只或多只股票设置预警：价格突破、均线金叉、资金流入、胜率拐点等。
      * 预警到达时通过邮件、短信、企业微信、钉钉等方式通知。
   7. **报表与导出**

      * 定时生成日报、周报、月报：行业涨跌情况、个股热点、资金流入排名、策略回测绩效对比等。
      * 支持导出为 PDF、Excel、CSV。

### 5. 预警与通知模块

1. **可配置的预警条件**

   * **价格预警**：当股价突破某个历史高/低价；
   * **技术指标预警**：如 MACD 金叉/死叉、KDJ 超买/超卖反转、布林带突破；
   * **资金流预警**：大单净流入 > X 万元，或连续 N 日连续流入；
   * **筹码胜率预警**：`winner_rate` 突破某阈值；
   * **估值预警**：PE/PB 跌破/突破某阈值。
2. **通知方式**

   * 邮件通知：通过 SMTP 发送预警邮件；
   * 第三方 IM 通道：支持企业微信机器人、钉钉机器人推送；
   * 短信通知（可集成阿里云/腾讯云短信服务）。
3. **预警规则管理**

   * 用户可以在 UI 中对已有预警规则进行增删改；
   * 支持全局预警（对所有自选股生效）和单只股票单独预警。
4. **预警日志与历史记录**

   * 每次预警触发记录日志，包含触发时间、触发条件、通知方式、通知结果。
   * 可在 UI 中查看历史预警记录并进行再次通知。

### 6. 系统管理与安全

1. **用户与权限管理**

   * 如果多人使用，可考虑接入简单的用户注册/登录体系（用户名/密码、OAuth2.0、短信验证码）。
   * 按角色划分权限：管理员、普通用户（如仅能看板数据，不能修改配置）；
2. **配置管理**

   * 所有关键参数（如第三方接口 Key、预警邮箱账号、短信渠道配置等）可在 “系统设置” 页面集中维护。
3. **性能与缓存**

   * 对常用查询、图表数据做缓存（如基于 Redis 或内存），避免高频查询导致数据库压力过大。
   * 对大数据量的报表、回测可采用异步任务（Celery）处理，避免阻塞前端请求。
4. **日志与审计**

   * 记录用户操作日志（如新增/编辑预警规则、策略回测参数）以及系统异常日志。
   * 方便事后排查与追溯。

---

## 四、技术选型建议

下面给出一个常见的、相对成熟的技术栈示例，你可以根据团队/个人习惯做适当调整。

1. **后端**

   * 语言：Python 3.8+
   * Web 框架：

     * **Flask** + Flask-RESTful + Flask-Login（适合轻量级项目）；
     * **Django**（自带 ORM、管理后台，社区成熟）。
     * **FastAPI**（接口性能优秀，支持自动文档）。
   * ORM：

     * **SQLAlchemy**（功能强大，灵活性高）；
     * **Peewee**（更轻量、易上手）。
   * 定时任务：

     * **APScheduler**（适合单进程定时）；
     * **Celery** + **RabbitMQ/Redis**（支持分布式、异步任务）。
   * 数据库：MySQL 或 MariaDB（与现有表结构兼容）。
   * 缓存：Redis（用于热点数据、预警离线通知等）。
   * 消息队列：RabbitMQ 或 Redis（配合 Celery 做异步任务）。

2. **前端**

   * 如果采用传统 MVC 架构：

     * **HTML/CSS/JavaScript** + **Bootstrap/Ant Design/Vant** + **jQuery**（简洁快速上手）；
   * 如果做单页应用（SPA）：

     * **Vue 3** + **Vuex** + **Vue Router** + **Element-UI/Ant Design Vue**；
     * 或 **React** + **Redux** + **React Router** + **Ant Design**。
   * 图表库：

     * **ECharts**（国产、丰富的 K 线图配置，极易和后端数据对接）；
     * **Plotly.js**（交互性更强，但体积较大）；
     * **Highcharts**（需要授权商业版）。

3. **数据分析与可视化**

   * **Pandas**：数据清洗、统计、筛选；
   * **NumPy**：数值计算；
   * **Matplotlib**：后端生成报表时用到；
   * **mplfinance** 或 **mpl\_finance**：简化 K 线图绘制（可用于离线生成图片）；
   * **TA-Lib** 或 **talib-binary**：计算技术指标（如果不想手动实现 MACD、KDJ 等）；
   * **Pyecharts**：后端直接生成带交互的网页图表（可在 Flask/Django 中渲染）。

4. **部署与运维**

   * **容器化**：使用 Docker 容器打包整体环境，方便在不同机器上部署；
   * **CI/CD**：GitLab CI、GitHub Actions 或 Jenkins，实现自动化测试与发布；
   * **服务器/云**：阿里云 ECS、腾讯云 CVM；
   * **反向代理与负载均衡**：Nginx + Gunicorn/Uvicorn；
   * **监控报警**：Prometheus + Grafana 或 阿里云云监控。

---

## 五、项目实施及里程碑（示例）

以下给出一个大致的里程碑时间表（以单人或小团队开发为例，可根据实际情况调整）：

| 时间周期            | 任务内容                                                                                |
| --------------- | ----------------------------------------------------------------------------------- |
| **第 1 - 2 周**   | - 调研可用数据源，完善 API Key、脚本模板<br>- 搭建项目框架（后端仓库、虚拟环境、前端骨架）                               |
| **第 3 - 4 周**   | - 实现数据库模型（ORM）映射<br>- 完成数据拉取与更新脚本<br>- 完成基础查询接口\*\*（股票信息、历史 K 线、日线基本、技术因子、资金流向）\*\* |
| **第 5 - 6 周**   | - 完成技术指标可视化（K 线 + MA/MACD/KDJ/布林/RIS）<br>- 实现基本面估值筛选接口与前端展示                         |
| **第 7 - 8 周**   | - 实现资金流向可视化（分单买卖、净流入折线）<br>- 筹码分布与胜率展示（成本分位曲线）                                      |
| **第 9 - 10 周**  | - 开发选股筛选模块（前后端联调）<br>- 完成策略回测框架与简单示例策略回测                                            |
| **第 11 - 12 周** | - 实现预警规则管理与通知（邮件/企业微信/钉钉）<br>- 开发自选股/持仓管理界面                                         |
| **第 13 - 14 周** | - 系统集成测试、性能优化<br>- 部署到线上环境，撰写简单使用文档                                                 |
| **第 15 周及以后**   | - 根据用户反馈迭代功能<br>- 新增更多技术指标（如 SAR、ATR、量能动量指标）<br>- 完善策略库、做深度回测、多因子选股等                |

---

## 六、系统架构示意

```mermaid
flowchart LR
  subgraph 数据层
    A1[stock_basic] 
    A2[stock_daily_history]
    A3[stock_daily_basic]
    A4[stock_factor]
    A5[stock_ma_data]
    A6[stock_moneyflow]
    A7[stock_cyq_perf]
  end

  subgraph 后端服务
    B1[数据获取与更新模块]
    B2[ORM & 基础查询接口]
    B3[数据处理与分析模块]
    B4[策略回测引擎]
    B5[预警规则引擎]
    B6[日志与监控]
  end

  subgraph 前端界面
    C1[首页概览]
    C2[个股详情页]
    C3[选股筛选页]
    C4[策略回测页]
    C5[预警配置页]
    C6[自选/持仓管理]
  end

  subgraph 通知渠道
    D1[邮件]
    D2[企业微信]
    D3[钉钉]
    D4[短信]
  end

  A1 -->|基础信息| B2
  A2 & A3 & A4 & A5 & A6 & A7 -->|历史行情/指标/资金/筹码| B2
  B2 --> B3
  B3 --> C1 & C2 & C3
  B4 --> C4
  B5 --> C5
  C6 --> B5
  B5 --> D1 & D2 & D3 & D4
  B6 --> B1 & B2 & B3 & B4 & B5
```

---

## 七、功能细节示例

下面以「个股详情页」为例，说明如何调用各张表的数据并进行展示。假设用户点击查看 `600519.SH`（贵州茅台）在 2025-05-23 的详情。

1. **基本信息**

   * 从 `stock_basic` 中 `select * from stock_basic where ts_code='600519.SH'`，展示「贵州茅台 · 酿酒行业 · 地域：贵州 · 上市日期：2001-08-27」等。
2. **当日行情与日线基本指标**

   * 从 `stock_daily_history` 中 `select open, high, low, close, pre_close, change_c, pct_chg, vol, amount from stock_daily_history where ts_code='600519.SH' and trade_date='2025-05-23'`。
   * 从 `stock_daily_basic` 中 `select close, turnover_rate, turnover_rate_f, volume_ratio, pe, pe_ttm, pb, ps, ps_ttm, dv_ratio, dv_ttm, total_share, float_share, free_share, total_mv, circ_mv from stock_daily_basic where ts_code='600519.SH' and trade_date='2025-05-23'`。
3. **K 线 + 技术指标**

   * 从 `stock_factor` 中拉取过去 N 日（如 60 日）`open_hfq, high_hfq, low_hfq, close_hfq, macd_dif, macd_dea, macd, kdj_k, kdj_d, kdj_j, rsi_6, rsi_12, rsi_24, boll_upper, boll_mid, boll_lower` 等字段；
   * 谁再根据 `trade_date` 对齐，生成 K 线图并叠加指标。如：`mplfinance.plot(...)`、或前端用 ECharts DataZoom 实时缩放。
4. **均线值**

   * 从 `stock_ma_data` 中 `select ma5, ma10, ma20, ma30, ma60, ma120, ema5, ema10, ema20, ema30, ema60, ema120 from stock_ma_data where ts_code='600519.SH'`，直接显示在列表或表格里。
5. **资金流向**

   * 从 `stock_moneyflow` 中 `select buy_sm_vol, buy_sm_amount, sell_sm_vol, sell_sm_amount, buy_md_vol, buy_md_amount, sell_md_vol, sell_md_amount, buy_lg_vol, buy_lg_amount, sell_lg_vol, sell_lg_amount, buy_elg_vol, buy_elg_amount, sell_elg_vol, sell_elg_amount, net_mf_vol, net_mf_amount from stock_moneyflow where ts_code='600519.SH' and trade_date='2025-05-23'`。
   * 前端绘制分单买入/卖出柱状对比、以及净流入折线。
6. **筹码分布与胜率**

   * 从 `stock_cyq_perf` 中 `select his_low, his_high, cost_5pct, cost_15pct, cost_50pct, cost_85pct, cost_95pct, weight_avg, winner_rate from stock_cyq_perf where ts_code='600519.SH' and trade_date='2025-05-23'`。
   * 绘制不同分位的成本线（可用折线或阴影带图），并在 K 线图上标注加权平均成本线。
   * 同时将 `winner_rate` 与过去一段时间（N 日）的胜率曲线放在子图中，辅助判断。

---

## 八、未来扩展与优化

1. **更多数据维度**

   * **财务报表数据**（如净利润、营收、ROE、ROA 等）引入额外表，支持基本面深度分析；
   * **行业轮动与板块分析**：将 `stock_basic` 的 `industry` 拆分成更细粒度的行业板块，进行板块联动分析；
   * **研报与新闻情感**：接入研报、新闻 API，进行舆情与情感分析，做复合因子选股。

2. **高级选股&多因子模型**

   * 引入机器学习/深度学习模型，如随机森林、XGBoost，对多维度因子做打分选股；
   * 支持自定义因子公式（如“近 N 日涨跌幅波动率”），并在系统中动态生成因子值。

3. **增强回测与策略研究**

   * **逐笔回测**：如果能够获取分时或分钟级别数据，可做更精细的高频策略回测；
   * **多市场联动**：同时支持沪深 A股、港股、美股的联动分析与跨市场对冲策略。

4. **移动端或小程序**

   * 基于已有后端接口，可移植到微信小程序或 React Native / Flutter 客户端；
   * 对接推送服务，将重要预警直接推送到手机。

5. **权限与多用户协作**

   * 引入账户体系、分级权限；
   * 支持多个用户建立、分享自己的选股策略或回测方案。

6. **可进一步引入交易接口**

   * 如果未来接入某券商 API，实现模拟盘或实盘交易，把回测策略直接下单。

---

## 九、总结

* 本项目基于已有的 7 张表：

  * `stock_basic`（公司基本信息）；
  * `stock_cyq_perf`（筹码 & 胜率数据）；
  * `stock_daily_basic`（日线估值、换手、量比等）；
  * `stock_daily_history`（开高低收、成交量、涨跌幅等历史行情）；
  * `stock_factor`（MACD、KDJ、RSI、布林带等技术因子）；
  * `stock_ma_data`（各周期均线、EMA 值）；
  * `stock_moneyflow`（分单资金流向数据）。

* 通过「数据获取与更新」「基础查询 API」「多维度数据处理」「可视化展示」「选股筛选」「策略回测」「预警通知」等模块的有机组合，可以构建一套完整的中长期量化/半自动化选股分析系统。

* 在项目规划与实施过程中，一方面要保证数据的准确与稳定更新，另一方面要兼顾性能（异步任务、缓存）与用户体验（交互式图表、简洁易用的筛选界面）。

* 后续可根据需求不断拓展数据维度（财务报表、新闻情感、行业轮动等）和策略深度（多因子模型、机器学习模型、跨市场套利等），逐步演进成更专业、智能的量化投研平台。

希望上述需求规划能帮助你明确整体思路，为后续系统设计与开发提供一个可参考的蓝图。如有任何细节需要进一步探讨或补充，欢迎随时交流！
