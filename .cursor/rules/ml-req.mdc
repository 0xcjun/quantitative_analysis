---
description: 
globs: 
alwaysApply: false
---
## 一、开发规划概述

### 1.1 核心目标
- 构建机器学习驱动的多因子选股模型
- 实现自定义因子公式的动态计算引擎
- 提供因子有效性评估和模型性能监控

### 1.2 技术架构设计

```
多因子模型系统
├── 因子工程模块
│   ├── 基础因子计算器
│   ├── 自定义因子引擎
│   └── 因子有效性评估
├── 机器学习模块
│   ├── 特征工程
│   ├── 模型训练与评估
│   └── 模型预测与排序
├── 选股策略模块
│   ├── 多因子打分
│   ├── 组合优化
│   └── 风险控制
└── 监控与回测模块
    ├── 因子表现监控
    ├── 模型性能跟踪
    └── 策略回测验证
```

## 二、详细开发计划

### 2.1 第一阶段：因子工程基础设施（2-3周）

#### 2.1.1 扩展现有数据模型

## 一、开发规划概述

### 1.1 核心目标
- 构建机器学习驱动的多因子选股模型
- 实现自定义因子公式的动态计算引擎  
- 提供因子有效性评估和模型性能监控

### 1.2 技术架构设计

```
多因子模型系统
├── 因子工程模块
│   ├── 基础因子计算器
│   ├── 自定义因子引擎
│   └── 因子有效性评估
├── 机器学习模块
│   ├── 特征工程
│   ├── 模型训练与评估
│   └── 模型预测与排序
├── 选股策略模块
│   ├── 多因子打分
│   ├── 组合优化
│   └── 风险控制
└── 监控与回测模块
    ├── 因子表现监控
    ├── 模型性能跟踪
    └── 策略回测验证
```

## 二、详细开发计划

### 2.1 第一阶段：因子工程基础设施（2-3周）

#### 2.1.1 扩展现有数据模型

需要新增以下数据表：

```sql
-- 自定义因子定义表
CREATE TABLE `factor_definition` (
  `factor_id` varchar(50) NOT NULL COMMENT '因子ID',
  `factor_name` varchar(100) NOT NULL COMMENT '因子名称',
  `factor_formula` text NOT NULL COMMENT '因子公式',
  `factor_type` varchar(20) NOT NULL COMMENT '因子类型(technical/fundamental/momentum/volatility)',
  `description` text COMMENT '因子描述',
  `params` json COMMENT '参数配置',
  `is_active` tinyint(1) DEFAULT 1 COMMENT '是否启用',
  `created_at` timestamp DEFAULT CURRENT_TIMESTAMP,
  `updated_at` timestamp DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`factor_id`)
) COMMENT='自定义因子定义表';

-- 因子计算结果表
CREATE TABLE `factor_values` (
  `ts_code` varchar(20) NOT NULL COMMENT '股票代码',
  `trade_date` date NOT NULL COMMENT '交易日期',
  `factor_id` varchar(50) NOT NULL COMMENT '因子ID',
  `factor_value` decimal(15,6) COMMENT '因子值',
  `percentile_rank` decimal(5,2) COMMENT '百分位排名',
  `z_score` decimal(10,4) COMMENT 'Z分数',
  `created_at` timestamp DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`ts_code`,`trade_date`,`factor_id`),
  INDEX `idx_factor_date` (`factor_id`,`trade_date`),
  INDEX `idx_date_factor` (`trade_date`,`factor_id`)
) COMMENT='因子计算结果表';

-- 模型定义表
CREATE TABLE `ml_model_definition` (
  `model_id` varchar(50) NOT NULL COMMENT '模型ID',
  `model_name` varchar(100) NOT NULL COMMENT '模型名称',
  `model_type` varchar(30) NOT NULL COMMENT '模型类型(random_forest/xgboost/lightgbm)',
  `factor_list` json NOT NULL COMMENT '使用的因子列表',
  `target_type` varchar(20) NOT NULL COMMENT '预测目标(return_1d/return_5d/return_20d)',
  `model_params` json COMMENT '模型参数',
  `training_config` json COMMENT '训练配置',
  `is_active` tinyint(1) DEFAULT 1,
  `created_at` timestamp DEFAULT CURRENT_TIMESTAMP,
  `updated_at` timestamp DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`model_id`)
) COMMENT='机器学习模型定义表';

-- 模型预测结果表
CREATE TABLE `ml_predictions` (
  `ts_code` varchar(20) NOT NULL COMMENT '股票代码',
  `trade_date` date NOT NULL COMMENT '交易日期',
  `model_id` varchar(50) NOT NULL COMMENT '模型ID',
  `predicted_return` decimal(10,4) COMMENT '预测收益率',
  `probability_score` decimal(10,4) COMMENT '概率分数',
  `rank_score` int COMMENT '排名分数',
  `created_at` timestamp DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`ts_code`,`trade_date`,`model_id`),
  INDEX `idx_model_date` (`model_id`,`trade_date`),
  INDEX `idx_date_rank` (`trade_date`,`rank_score`)
) COMMENT='模型预测结果表';
```

#### 2.1.2 因子计算引擎

需要新增的依赖包：

```txt
# 机器学习相关
scikit-learn>=1.3.0
xgboost>=1.7.0
lightgbm>=4.0.0
catboost>=1.2.0

# 因子计算
alphalens>=0.4.0
empyrical>=0.5.5

# 数值计算增强
scipy>=1.11.0
statsmodels>=0.14.0

# 表达式解析
sympy>=1.12
numexpr>=2.8.0

# 并行计算
joblib>=1.3.0
```

创建因子计算引擎：

```python
# app/services/factor_engine.py
class FactorEngine:
    """因子计算引擎"""
    
    def __init__(self):
        self.factor_definitions = {}
        self.load_factor_definitions()
    
    def register_factor(self, factor_id: str, formula: str, params: dict = None):
        """注册自定义因子"""
        
    def calculate_factor(self, factor_id: str, ts_codes: List[str], 
                        start_date: str, end_date: str) -> pd.DataFrame:
        """计算指定因子值"""
        
    def calculate_all_factors(self, trade_date: str) -> pd.DataFrame:
        """计算所有因子的当日值"""
        
    def get_factor_exposure(self, factor_id: str, trade_date: str) -> pd.DataFrame:
        """获取因子暴露度"""
```

#### 2.1.3 内置因子库

基于现有数据，实现常用因子：

**技术面因子：**
- 动量因子：近N日收益率、相对强弱指标
- 反转因子：短期反转、长期反转
- 波动率因子：历史波动率、GARCH波动率
- 量价因子：量价背离、成交量相对强度

**基本面因子：**
- 估值因子：PE、PB、PS相对值、历史分位数
- 质量因子：ROE、ROA、毛利率趋势
- 成长因子：营收增长率、利润增长率

**资金面因子：**
- 资金流向因子：大单净流入强度、资金流向动量
- 筹码因子：筹码集中度、成本分布偏度

### 2.2 第二阶段：机器学习模型框架（2-3周）

#### 2.2.1 特征工程模块

```python
# app/services/feature_engineering.py
class FeatureEngineer:
    """特征工程"""
    
    def prepare_features(self, factor_data: pd.DataFrame, 
                        target_data: pd.DataFrame) -> Tuple[pd.DataFrame, pd.Series]:
        """准备训练特征和目标变量"""
        
    def handle_missing_values(self, df: pd.DataFrame) -> pd.DataFrame:
        """处理缺失值"""
        
    def normalize_features(self, df: pd.DataFrame) -> pd.DataFrame:
        """特征标准化"""
        
    def feature_selection(self, X: pd.DataFrame, y: pd.Series) -> List[str]:
        """特征选择"""
```

#### 2.2.2 模型训练与评估

```python
# app/services/ml_models.py
class MLModelManager:
    """机器学习模型管理器"""
    
    def train_model(self, model_config: dict, train_data: pd.DataFrame) -> dict:
        """训练模型"""
        
    def predict(self, model_id: str, features: pd.DataFrame) -> pd.DataFrame:
        """模型预测"""
        
    def evaluate_model(self, model_id: str, test_data: pd.DataFrame) -> dict:
        """模型评估"""
        
    def update_model(self, model_id: str, new_data: pd.DataFrame):
        """增量更新模型"""
```

支持的模型类型：
- **随机森林（Random Forest）**：适合处理非线性关系，特征重要性解释性好
- **XGBoost**：梯度提升，处理缺失值能力强，性能优秀
- **LightGBM**：训练速度快，内存占用少
- **CatBoost**：自动处理类别特征，过拟合风险低

### 2.3 第三阶段：选股策略实现（2周）

#### 2.3.1 多因子打分模型

```python
# app/services/stock_scoring.py
class StockScoringEngine:
    """股票打分引擎"""
    
    def calculate_factor_scores(self, trade_date: str) -> pd.DataFrame:
        """计算因子分数"""
        
    def calculate_composite_score(self, factor_scores: pd.DataFrame, 
                                 weights: dict) -> pd.DataFrame:
        """计算综合分数"""
        
    def rank_stocks(self, scores: pd.DataFrame, top_n: int = 50) -> List[str]:
        """股票排名选择"""
```

#### 2.3.2 组合优化

```python
# app/services/portfolio_optimizer.py
class PortfolioOptimizer:
    """组合优化器"""
    
    def optimize_weights(self, expected_returns: pd.Series, 
                        risk_model: pd.DataFrame) -> pd.Series:
        """优化组合权重"""
        
    def apply_constraints(self, weights: pd.Series, constraints: dict) -> pd.Series:
        """应用约束条件"""
```

### 2.4 第四阶段：前端界面开发（2周）

#### 2.4.1 因子管理界面

- 因子定义与编辑
- 因子公式验证
- 因子计算状态监控

#### 2.4.2 模型管理界面

- 模型配置与训练
- 模型性能监控
- 预测结果展示

#### 2.4.3 选股结果展示

- 多因子选股结果
- 因子贡献度分析
- 组合风险分析

## 三、需要的数据支撑

### 3.1 现有数据充分性评估

**已有数据（充分）：**
- ✅ 基础行情数据：`stock_daily_history`、`stock_factor`
- ✅ 基本面数据：`stock_daily_basic`（PE、PB、PS等）
- ✅ 技术指标：MACD、KDJ、RSI、布林带等
- ✅ 资金流向：`stock_moneyflow`
- ✅ 筹码分布：`stock_cyq_perf`

**需要补充的数据：**

#### 3.1.1 财务数据（重要性：高）
```sql
-- 财务报表数据
CREATE TABLE `financial_data` (
  `ts_code` varchar(20) NOT NULL,
  `report_date` date NOT NULL,
  `revenue` decimal(20,2) COMMENT '营业收入',
  `net_profit` decimal(20,2) COMMENT '净利润',
  `total_assets` decimal(20,2) COMMENT '总资产',
  `total_equity` decimal(20,2) COMMENT '股东权益',
  `roe` decimal(10,4) COMMENT 'ROE',
  `roa` decimal(10,4) COMMENT 'ROA',
  `gross_margin` decimal(10,4) COMMENT '毛利率',
  PRIMARY KEY (`ts_code`,`report_date`)
);
```

#### 3.1.2 行业与概念数据（重要性：中）
```sql
-- 行业分类数据
CREATE TABLE `industry_classification` (
  `ts_code` varchar(20) NOT NULL,
  `industry_l1` varchar(50) COMMENT '一级行业',
  `industry_l2` varchar(50) COMMENT '二级行业',
  `industry_l3` varchar(50) COMMENT '三级行业',
  `concept_tags` json COMMENT '概念标签',
  PRIMARY KEY (`ts_code`)
);
```

#### 3.1.3 宏观经济数据（重要性：中）
```sql
-- 宏观经济指标
CREATE TABLE `macro_indicators` (
  `indicator_name` varchar(50) NOT NULL,
  `trade_date` date NOT NULL,
  `value` decimal(15,6),
  PRIMARY KEY (`indicator_name`,`trade_date`)
);
```

### 3.2 数据获取方案

#### 3.2.1 财务数据获取
- **Tushare Pro**：`income`、`balancesheet`、`cashflow`接口
- **聚宽**：`get_fundamentals`接口
- **Wind**：财务数据接口

#### 3.2.2 行业数据获取
- **Tushare**：`stock_basic`中的`industry`字段
- **申万行业分类**：通过API获取详细分类
- **概念板块**：通过爬虫或API获取热点概念

## 四、实施优先级建议

### 第一优先级（立即开始）
1. **因子计算引擎**：基于现有数据实现技术面因子
2. **简单机器学习模型**：使用随机森林进行初步选股
3. **基础界面**：因子管理和选股结果展示

### 第二优先级（1个月内）
1. **财务数据集成**：补充基本面因子
2. **模型优化**：引入XGBoost、LightGBM
3. **回测验证**：验证模型有效性

### 第三优先级（2个月内）
1. **高级特征工程**：交叉特征、时序特征
2. **组合优化**：风险控制和权重优化
3. **实时监控**：模型性能实时跟踪

## 五、技术实现要点

### 5.1 自定义因子公式引擎

支持类似以下语法的因子定义：
```python
# 近N日涨跌幅波动率
"std(pct_change, {period})"

# 相对强弱指标
"rank(return_{period}d) / count(ts_code)"

# 量价背离
"corr(volume, close, {period}) * -1"

# PE历史分位数
"percentile_rank(pe, {period})"
```

### 5.2 模型训练流程

```python
# 伪代码示例
def train_multifactor_model():
    # 1. 获取因子数据
    factor_data = get_factor_data(start_date, end_date)
    
    # 2. 计算目标变量（未来收益率）
    target_data = calculate_future_returns(factor_data, periods=[5, 20])
    
    # 3. 特征工程
    features, targets = prepare_features(factor_data, target_data)
    
    # 4. 训练模型
    model = train_xgboost(features, targets)
    
    # 5. 模型评估
    performance = evaluate_model(model, test_data)
    
    # 6. 保存模型
    save_model(model, model_id)
```

### 5.3 实时选股流程

```python
def daily_stock_selection():
    # 1. 计算最新因子值
    latest_factors = calculate_daily_factors(today)
    
    # 2. 模型预测
    predictions = model.predict(latest_factors)
    
    # 3. 股票排名
    ranked_stocks = rank_by_prediction(predictions)
    
    # 4. 风险控制
    filtered_stocks = apply_risk_filters(ranked_stocks)
    
    # 5. 组合优化
    optimal_weights = optimize_portfolio(filtered_stocks)
    
    return optimal_weights
```